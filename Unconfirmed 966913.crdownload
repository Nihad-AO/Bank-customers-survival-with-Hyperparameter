# -*- coding: utf-8 -*-
"""Bank Customer survival with Hyperparameter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B_CiszTXjAzE8um8bardaRqKmmzKZ0Tn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv('/content/drive/My Drive/my pipe line projects/Churn_Modelling.csv')

df.drop(['RowNumber','CustomerId','Surname'],axis=1,inplace=True)

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

df['Gender']=le.fit_transform(df['Gender'])

df=pd.get_dummies(df,drop_first=True)

x=df.drop('Exited',axis=1)
y=df['Exited']

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.25,random_state=40)

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

import keras

from keras.layers import Dense
from keras.layers import Dropout

from keras.models import Sequential

def create_model(layers, activation):
    model = Sequential()
    for i, nodes in enumerate(layers):
        if i==0:
            model.add(Dense(nodes,input_dim=x_train.shape[1]))
            model.add(Activation(activation))
            model.add(Dropout(0.3))
        else:
            model.add(Dense(nodes))
            model.add(Activation(activation))
            model.add(Dropout(0.3))
            model.add(Dense(units = 1, kernel_initializer= 'glorot_uniform', activation = 'sigmoid')) # Note: no activation beyond this point
    
    model.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])
    return model

from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import GridSearchCV

from keras.models import Sequential
from keras.layers import Dense, Activation, Embedding, Flatten, LeakyReLU, BatchNormalization, Dropout
from keras.activations import relu, sigmoid

model = KerasClassifier(build_fn=create_model, verbose=0)

layers = [(20,), (45, 30, 15), (40, 20)]
activations = ['sigmoid', 'relu']
param_grid = dict(layers=layers, activation=activations, batch_size = [60,128], epochs=[30])
grid = GridSearchCV(estimator=model, param_grid=param_grid,cv=5)

grid_result = grid.fit(X=x_train,y=y_train)

grid_result

grid_result.best_score_

grid_result.best_params_

